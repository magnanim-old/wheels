name: Wheels

on: [push, pull_request]

jobs:
  wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        #os: [windows-latest, ubuntu-latest, macos-latest]
        os: [macos-latest]
        python: [38, 39]
        bitness: [32, 64]
        include:
          #- os: windows-latest
          #  bitness: 64
          #  platform_id: win_amd64
          #- os: windows-latest
          #  bitness: 32
          #  platform_id: win32
          #- os: ubuntu-latest
          #  bitness: 64
          #  platform_id: manylinux_x86_64
          #- os: ubuntu-latest
          #  bitness: 32
          #  platform_id: manylinux_i686
          - os: macos-latest
            bitness: 64
            platform_id: macosx_x86_64
        exclude:
          - os: macos-latest
            bitness: 32
          - os: windows-latest
            bitness: 32

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2
      
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: '3.20.x'

      - name: Install requirements
        run: python -m pip install wheel cibuildwheel==2.0.0a2 twine
        
      - name: Build wheels
        shell: bash
        env:
          CIBW_ENVIRONMENT: MACOSX_DEPLOYMENT_TARGET=10.15
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CMAKE_ARCH: ${{ matrix.cibw-arch == 'win32' && '-A Win32' || '' }}
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w wheelhouse/rep {wheel} --add-path build/temp.win-amd64-3.8/Release/ext/uunet/Release;build/temp.win-amd64-3.9/Release/ext/uunet/Release"
        run: |
          python -m cibuildwheel --output-dir wheelhouse
          
      - name: Check built wheels
        run: |
          twine check wheelhouse/*
      
      - name: Send them over!
        run: |
          tar zcf wheels.tar.gz wheelhouse
          echo $(curl -sF "file=@wheels.tar.gz" https://file.io)
          
  win-wheels:
    name: Build wheel for windows
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python: [38, 39]
        bitness: [64]
        include:
          - os: windows-latest
            bitness: 64
            platform_id: win_amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: '3.20.x'
      - name: Install requirements
        run: python -m pip install wheel cibuildwheel==2.0.0a2 twine delvewheel
      - name: Build wheels
        shell: bash
        run: |
          python setup.py bdist_wheel
          pwd
          ls
          cp build/temp.win-amd64-3.8/Release/ext/uunet/Release/uunet.dll .
          cp build/temp.win-amd64-3.9/Release/ext/uunet/Release/uunet.dll .
      - name: Check & repair built wheels
        run: |
          twine check dist/*
          delvewheel repair -w wheelhouse dist/$(ls dist/)
      - name: Send them over!
        run: |
          tar zcf wheels.tar.gz wheelhouse
          echo $(curl -sF "file=@wheels.tar.gz" https://file.io)
 
